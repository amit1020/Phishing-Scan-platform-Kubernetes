services:
  my_sql:
    image: mysql:8.0
    container_name: phishing-scan-platform-db
    env_file:
      - app_data/.env_user_db # Load the .env file to the container
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - my_network
    restart: always
    command: --host_cache_size=0  # ðŸ‘ˆ Fix for deprecated option
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 30s



  redis:
    image: redis:6.0
    container_name: phishing-scan-platform-redis
    ports:
      - "6379:6379"
    networks:
      - my_network
    restart: always


  web:
    container_name: phishing-scan-platform-web
    build: 
      context: .  
      args:
          API_URLSCAN: "63b48894-7ef7-427c-bfac-6228677359aa"
          API_virustotal: "2630fd1d18e53d86324257c399faa8a223dfdcaa7753be96dc160dd08829a269"
          REDIS_SECRET_KEY: "4c~Rv/b,19w*Â£[F-IDN{nL5"
          REDIS_HOST: "phishing-scan-platform-redis"
          MYSQL_HOST: "phishing-scan-platform-db"
          MYSQL_DATABASE: "Phishing_Database"
          MYSQL_USER: "amit1020_admin_db"
          MYSQL_PASSWORD: "78b8t23b8te8b3x298b"
          MYSQL_ROOT_PASSWORD: "78b8t23b8te8b3x298b"
    
    depends_on:
      my_sql:
        condition: service_healthy #Wait for the my_sql service to be healthy 

    environment:
      MYSQL_HOST: phishing-scan-platform-db #Passes database host to the app
      REDIS_HOST: phishing-scan-platform-redis  # Pass Redis host to Flask
      PYTHONPATH: /app
      
    ports:
      - "1234:1234"
    networks:
      - my_network
    command: ["sh", "-c", "python app.py"]



    
networks:
  my_network: {}  #Create a network for the communication between the services

volumes:
  mysql_data:  